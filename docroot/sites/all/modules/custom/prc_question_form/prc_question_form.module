<?php

/**
 * @file
 * Alters to question forms.
 */

/**
 * Implements hook_menu().
 */
function prc_question_form_menu() {
  $items = array();
  $items['node/%node/questionedit'] = array(
    'title' => 'Edit PRC Interactive Choice Question',
    'page callback' => 'prc_question_form_custom_multichoice',
    'page arguments' => array(1),
    'access callback' => 'node_access',
    'access arguments' => array('update', 1),
    'type' => MENU_NORMAL_ITEM,
  );
  return $items;
}

/**
 *  Implements hook_permission().
 */
function prc_question_form_permission() {
  $perms = array(
    'add parcc items' => array(
      'title' => t('Add PARCC Items'),
      'description' => t('Add PARCC Items'),
    ),
    'view speaking and listening' => array(
      'title' => t('View Speaking and Listening Resources'),
      'description' => t('View Speaking and Listening Resources'),
    ),
  );
  return $perms;
}

/**
 * Menu callback; presents the node editing form.
 */
function prc_question_form_custom_multichoice($node) {
  $type_name = node_type_get_name($node);
  drupal_set_title(t('<em>Edit @type</em> @title', array(
    '@type' => $type_name,
    '@title' => $node->title
  )), PASS_THROUGH);
  return drupal_get_form('prc_question_form_custom_multichoice_form', $node);
}

/**
 * Implements hook_clone_node_alter().
 */
function prc_question_form_clone_node_alter(&$node, $context) {
  $has_role = _prc_question_preview_user_has_role(array('PARCC Item Author'));
  if (!$has_role) {
    $node->field_parcc_item['und'][0]['value'] = 0;
  }
}

function prc_question_form_custom_multichoice_form($form, &$form_state) {
  $node = $form_state['build_info']['args'][0];

  module_load_include('inc', 'node', 'node.pages');
  $node_form = new stdClass;
  $node_form->type = $node->type;
  $node_form->language = LANGUAGE_NONE;
  $original_form = drupal_get_form($node->type . '_node_form', $node_form);

  $form = array();

  $form['title'] = $original_form['title'];
  $form['body'] = $original_form['body'];
  $form['field_standard'] = $original_form['field_standard'];

  return $form;
}

/**
 * Implements hook_form_FORM_ID_alter
 *
 * Changes the title of the registration form
 *
 * @param $form
 * @param $form_state
 */
function prc_question_form_form_multichoice_node_form_alter(&$form, &$form_state) {
  // Not getting the results I want during getCreationForm()
  // Still have to go in here and modify stuff - without doing this,
  // we don't get the node fields.
  $orig_title = drupal_get_title();
  $new_title = str_replace(t('Multiple choice question'), t('Interactive Choice Item'), $orig_title);
  drupal_set_title($new_title);

  // Quiz bug - it doesn't set this by itself.
  if (isset($form_state['build_info']['args'][0]->choice_multi)) {
    $form['alternatives']['settings']['choice_multi']['#default_value'] = $form_state['build_info']['args'][0]->choice_multi;
  }

  $form['feedback']['#access'] = FALSE;
  $form['title']['#title'] = t('Item Title');
  $form['title']['#required'] = TRUE;

  $form['alternatives']['settings']['choice_random']['#access'] = FALSE;
  $form['alternatives']['settings']['choice_boolean']['#access'] = FALSE;

  $form['field_standard'][LANGUAGE_NONE]['#title'] = t('Item Standard');
  $form['field_standard'][LANGUAGE_NONE]['#required'] = TRUE;
  $form['faux_standard'] = array(
    '#type' => 'hidden',
  );

  $form['alternatives']['#title'] = 'Answer Choice (Distractor)';

  $choice_count = $form_state['choice_count'];

  for ($c = 0; $c < $choice_count; $c++) {
    if (array_key_exists($c, $form['alternatives'])) {
      $form['alternatives'][$c]['advanced']['#access'] = FALSE;
      $form['alternatives'][$c]['answer']['#required'] = FALSE;
    }
  }

  $form['alternatives']['settings']['#weight'] = -100;

  $form['field_parcc_item']['#access'] = user_access('add parcc items');

  $form['#validate'][] = 'prc_question_form_standard_required_validate';
  $form['#validate'][] = 'prc_question_form_make_parcc_item_validate';
}

function prc_question_form_subject_required_validate(&$form, &$form_state) {
  _prc_question_form_shs_term_required_validate('subject', 'Subject', $form, $form_state);
}

function _prc_question_form_shs_term_required_validate($term_field, $required_label, &$form, &$form_state) {
  $tid = $form_state['input']['field_' . $term_field]['und'][0]['tid'];
  // Allow faux_field for testing purposes
  if (!$tid && (!array_key_exists('faux_' . $term_field, $form_state['values']) || !$form_state['values']['faux_' . $term_field])) {
    form_set_error('field_' . $term_field, t('At least one ' . $required_label . ' is required.'));
  }
}

function prc_question_form_non_item_standard_required_validate(&$form, &$form_state) {
  _prc_question_form_shs_term_required_validate('standard', 'Standard', $form, $form_state);
}

function prc_question_form_standard_required_validate(&$form, &$form_state) {
  _prc_question_form_shs_term_required_validate('standard', 'Item Standard', $form, $form_state);
}

function prc_question_form_make_parcc_item_validate(&$form, &$form_state) {
  $was_parcc_item = isset($form_state['node']->field_parcc_item) ? $form_state['node']->field_parcc_item['und'][0]['value'] : NULL;
  $still_is_parcc_item = $form_state['values']['field_parcc_item']['und'][0]['value'];
  if ($was_parcc_item && !$still_is_parcc_item) {
    $nid = $form_state['node']->nid;
    $in_quiz = prc_question_in_quiz($nid);
    if ($in_quiz) {
      form_set_error('field_is_parcc_item', t('A PARCC item that is in an assessment cannot be changed to a non-PARCC item.'));
    }
  }
}

function prc_question_in_quiz($question_nid) {
  $result = db_select('quiz_node_relationship', 'qnr')
    ->fields('qnr', array(
      'parent_nid',
      'child_nid',
      'child_vid',
      'question_status',
      'weight',
      'max_score',
      'auto_update_max_score',
      'qnr_id',
      'qnr_pid'
    ))
    ->condition('child_nid', $question_nid)
    ->execute();

  return $result->rowCount();
}

/**
 * Implements hook_quiz_question_info_alter().
 */
function prc_question_form_quiz_question_info_alter(&$info) {
  // Change question provider from MultichoiceQuestion]
  $info['multichoice']['question provider'] = 'PRCMultichoiceQuestion';
  $info['short_answer']['question provider'] = 'PRCShortAnswerQuestion';
}

/**
 * ajax callback function used when adding alternatives to the node-form
 */
function prc_multichoice_remove_alternative_ajax_callback($form, &$form_state) {
  return $form['alternatives'];
}

/**
 * Implements hook_form_alter().
 */
function prc_question_form_form_quiz_directions_node_form_alter(&$form, &$form_state) {
  $orig_title = drupal_get_title();
  $new_title = str_replace(t('Assessment directions'), t('Non-interactive Item (text only)'), $orig_title);
  drupal_set_title($new_title);

  $form['title']['#required'] = TRUE;

  $form['feedback']['#access'] = FALSE;
  $form['field_parcc_item']['#access'] = user_access('add parcc items');
  $form['#validate'][] = 'prc_question_form_make_parcc_item_validate';
}

/**
 * Implements hook_form_alter().
 */
function prc_question_form_form_short_answer_node_form_alter(&$form, &$form_state) {
  $orig_title = drupal_get_title();
  $new_title = str_replace(t('Short answer question'), t('Short Answer Item'), $orig_title);
  drupal_set_title($new_title);

  $form['feedback']['#access'] = FALSE;
  unset($form['answer']['#description']);
  $form['answer']['correct_answer_evaluation']['#access'] = FALSE;
  $form['answer']['regex_box']['#access'] = FALSE;

  $form['field_standard'][LANGUAGE_NONE]['#title'] = t('Item Standard');
  $form['field_standard'][LANGUAGE_NONE]['#required'] = TRUE;
  $form['#validate'][] = 'prc_question_form_standard_required_validate';

  $form['field_parcc_item']['#access'] = user_access('add parcc items');

  $form['answer']['correct_answer']['#description'] = t('Specify the answer.');
  $form['faux_standard'] = array(
    '#type' => 'hidden',
  );
  $form['#validate'][] = 'prc_question_form_make_parcc_item_validate';
}

function prc_question_form_form_speaking_and_listening_resource_node_form_alter(&$form, &$form_state) {
  $form['field_standard'][LANGUAGE_NONE]['#required'] = TRUE;
  $form['faux_standard'] = array(
    '#type' => 'hidden',
  );

  $form['field_subject'][LANGUAGE_NONE]['#required'] = TRUE;
  $form['faux_subject'] = array(
    '#type' => 'hidden',
  );

  $form['#validate'][] = 'prc_question_form_subject_required_validate';
  $form['#validate'][] = 'prc_question_form_non_item_standard_required_validate';
}

function prc_question_form_form_formative_instructional_task_node_form_alter(&$form, &$form_state) {
  $form['field_standard'][LANGUAGE_NONE]['#required'] = TRUE;
  $form['faux_standard'] = array(
    '#type' => 'hidden',
  );

  $form['field_subject'][LANGUAGE_NONE]['#required'] = TRUE;
  $form['faux_subject'] = array(
    '#type' => 'hidden',
  );

  $form['#validate'][] = 'prc_question_form_subject_required_validate';
  $form['#validate'][] = 'prc_question_form_non_item_standard_required_validate';
}