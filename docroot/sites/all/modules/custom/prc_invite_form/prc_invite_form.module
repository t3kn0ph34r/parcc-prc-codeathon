<?php

/**
 * @file
 * Alters to user edit forms.
 */

function _prc_member_states() {
  $member_states = array();
  $vid = taxonomy_vocabulary_machine_name_load('member_state')->vid;
  $terms = taxonomy_get_tree($vid);
  foreach ($terms as $term) {
    $member_states[] = $term->name;
  }
  return $member_states;
}

/**
 * Extracts the parcc member tids from field_user_state.  Previously used to
 * also modify the way PARCC states were displayed.
 *
 * @param $form
 * @param $p_states
 * @return $member_tids
 */
function _prc_member_state_tids(&$form, $p_states) {
  $member_tids = array();

  // Add text to each member state
  foreach ($form['field_user_state']['und']['#options'] as $tid => &$term) {
    if (in_array($term, $p_states)) {
      // PRC-1973 : Don't display PARCC member anymore, but still return the
      // member TIDs. //$term = $term . ' - PARCC Member';
      $member_tids[] = $tid;
    }
  }
  return $member_tids;
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function prc_invite_form_form_invite_form_alter(&$form, &$form_state) {
  _prc_invite_form_set_title();

  // Change mail label and description, and make it a multi-line text area
  $mail = array(
    '#required' => '1',
    '#description' => t('Input email addresses of users you want to invite. Put each address on a separate line. Each person will receive an invitation to join the site.'),
    '#weight' => '0',
    '#type' => 'textarea',
    '#title' => t('E-mail'),
  );
  $form['field_multi_emails'] = $mail;

  // We are leaving out the standard Invite email fields...
  $form['field_invitation_email_address']['#access'] = FALSE;
  $form['field_invitation_email_subject']['#access'] = FALSE;
  $form['field_invitation_email_body']['#access'] = FALSE;
  $form['token_help']['#access'] = FALSE;

  // ...and adding our own.
  $default_message_text = "I'd like to invite you to the PARCC Partnership Resource Center.";
  $form['prc_invite_message'] = array(
    '#required' => '1',
    '#description' => t('You can personalize the message that will be sent in the invitation email.'),
    '#weight' => '1',
    '#type' => 'textarea',
    '#title' => t('Message'),
    '#default_value' => $default_message_text,
  );

  // And add a set of radio buttons for roles...
  $roles = _prc_invite_form_invite_roles();
  $form['invite_role'] = array(
    '#type' => 'checkboxes',
    '#title' => 'Role',
    '#description' => 'Users invited will have the role selected.',
    '#required' => TRUE,
    '#access' => TRUE,
    '#options' => $roles,
  );

  $form['field_user_state']['und']['#title'] = t('State where the invitee teaches');

  // Hide the field_role_id field - we'll use this to save the role we pick in invite_role
  if (array_key_exists('field_role_id', $form)) {
    $form['field_role_id']['#access'] = FALSE;
  }

  $roles = user_roles();
  $roles_with_states = array('PARCC-Member Educator', 'Content Contributor');
  $roles_rids = array();
  $role_states = array();
  foreach ($roles_with_states as $role) {
    $rid = array_search($role, $roles);
    // IE requires this to be a string. Joy.
    $roles_rids[] = array('value' => "$rid");
    if (count($role_states)) {
      $role_states[] = 'or';
    }
    $role_states[] = array(':input[name="invite_role[' . $rid . ']"]' => array('checked' => TRUE));
  }

  // Now make the Member State dropdown dependent on the Role selected
  $form['field_member_state']['#states'] = array(
    'visible' => array(
      $role_states,
    ),
  );

  $form['#validate'][] = 'prc_invite_form_form_invite_form_validate';

  foreach ($form['#validate'] as $key => $og_user_node) {
    if ($og_user_node == "invite_by_email_form_invite_form_validate") {
      unset ($form['#validate'][$key]);
    }
  }

  // in form action, add prc_invite_form_form_invite_form_submit submit, remove invited_edit_form_submit,
  // and make sure this all happens before ctools_wizard_submit
  if (isset($form['actions']['submit']['#submit'])) {
    array_unshift($form['actions']['submit']['#submit'], 'prc_invite_form_form_invite_form_submit');
    foreach ($form['actions']['submit']['#submit'] as $key => $og_user_node) {
      if ($og_user_node == "invite_form_submit") {
        unset ($form['actions']['submit']['#submit'][$key]);
      }
    }
  }
}

function _prc_invite_form_invite_roles() {
  $all_roles = user_roles();
  $omit_roles = array('administrator', 'anonymous user', 'authenticated user');
  $roles = array_diff($all_roles, $omit_roles);
  return $roles;
}

function _prc_invite_form_set_title() {
  drupal_set_title('Invite New PRC Website User');
}

function prc_invite_form_form_invite_form_validate($form, &$form_state) {
  //Require user state if it is one of the roles
  $roles = user_roles();
  $roles_with_states = array('PARCC-Member Educator', 'Content Contributor');
  $roles_rids = array();
  $role_states = array();
  foreach ($roles_with_states as $role) {
    $rids[] = array_search($role, $roles);
  }
  $uid = $form_state['values']['uid'];
  $state = $form_state['values']['field_user_state']['und'][0]['tid'];

  if (in_array($uid, $rids) && empty($state)) {
    form_set_error('prc_invite_form', 'State where they teach field is required.');
  }

  _prc_invite_form_set_title();

  if (
    empty($form_state['values']['field_invitation_email_address']) &&
    !empty($form_state['input']['field_invitation_email_address'])
  ) {
    $form_state['values']['field_invitation_email_address'] = $form_state['input']['field_invitation_email_address'];
  }

  $role_field = 'invite_role';
  $rids = $form_state['values']['invite_role'];
  _prc_invite_form_validate_trt_roles($rids, $role_field);

  $valid_emails = array();
  _prc_invite_form_validate_email_address_format($form_state, 'field_multi_emails', $valid_emails);
  $form_state['invitees'] = $valid_emails;

  // Notify field widgets to validate their data.
  field_attach_form_validate('invite', $form_state['invite'], $form, $form_state);
}

/**
 * @param $rids
 * @param $role_field
 */
function _prc_invite_form_validate_trt_roles($rids, $role_field) {
  $rids = array_filter($rids, '_prc_invite_form_valid_roles');
  $roles = user_roles();
  $trt_roles = array('School Admin', 'District Admin', 'State Admin');
  $trt_rids = array();
  foreach ($trt_roles as $role) {
    $trt_rid = array_search($role, $roles);
    $trt_rids[] = $trt_rid;
  }

  $diff = array_filter(array_diff($rids, $trt_rids));

  if (!count($diff)) {
    form_set_error($role_field, t('A non-TRT role is required.'));
  }
}

function _prc_invite_form_valid_roles($var) {
  // returns whether the input is a number, not 0
  return ($var && is_numeric($var));
}

/**
 * @param $form_state
 * @return mixed
 */
function _prc_invite_form_validate_email_address_format(&$form_state, $field_name, &$valid_emails) {
  if (isset($form_state['values'][$field_name])) {
    $valid = array();
    $invalid = array();
    $nonunique = array();
    $already_exists = array();

    $trimmed_emails = trim($form_state['values'][$field_name]);

    // Allow multiple delimiters. Fixes DEU problems and currently the Behat test can't put a linebreak into the textarea
    $trimmed_emails = str_replace(',', "\n", $trimmed_emails);
    $trimmed_emails = str_replace(';', "\n", $trimmed_emails);

    foreach (explode("\n", $trimmed_emails) as $email) {
      $email = trim($email);
      if (!empty($email)) {
        if (valid_email_address($email)) {
          $user = user_load_by_mail($email);
          if ($user) {
            $already_exists[$email] = $email;
          } else {
            if (array_key_exists($email, $valid)) {
              $nonunique[$email] = $email;
            } else {
              $valid[$email] = $email;
            }
          }
        } else {
          $invalid[] = $email;
        }
      }
    }
    if (empty($invalid) && empty($already_exists) && empty($nonunique)) {
      $valid_emails = $valid;
    } elseif (count($invalid) == 1) {
      form_set_error($field_name, t('%email is not a valid e-mail address.', array('%email' => reset($invalid))));
    } elseif (count($invalid)) {
      form_set_error($field_name, t('%emails are not valid e-mail addresses.', array('%emails' => implode(', ', $invalid))));
    } elseif (count($already_exists)) {
      form_set_error($field_name, t('Please remove the following already existing email addresses from the list: %emails', array('%emails' => implode(', ', $already_exists))));
    } elseif (count($nonunique)) {
      form_set_error($field_name, t('Please remove the following duplicate email addresses from the list: %emails', array('%emails' => implode(', ', $nonunique))));
    }

    if (empty($valid) && empty($invalid)) {
      form_set_error($field_name, t('Please input one or more email addresses'));
    }
  }
}

// each email address needs its own invite object
// so we tell the entity builder that this guy is new
function _prc_invite_form_invitations_entity_builder($entity_type, $entity, $form, $form_state) {
  if (!isset($entity->is_new)) {
    $entity->is_new = TRUE;
    // we want a new invites token, so unset token if it exists
    if (isset($entity->invites_token)) {
      unset ($entity->invites_token);
    }
    // and reset the invites id
    $entity->invites_id = '';
  }
}

function prc_invite_form_form_invite_form_submit(&$form, &$form_state) {
  $entity_builders = array('_prc_invite_form_invitations_entity_builder');
  if (array_key_exists('#entity_builders', $form)) {
    $entity_builders += $form['#entity_builders'];
  }
  $form['#entity_builders'] = $entity_builders;
  $new_body = $form_state['values']['prc_invite_message'] . '<br />' . $form_state['values']['field_invitation_email_body'][LANGUAGE_NONE][0]['value'];
  $form_state['values']['field_invitation_email_body'][LANGUAGE_NONE][0]['value'] = $new_body; // .= pre-concat operator not working
  $rids = $form_state['values']['invite_role'];
  foreach ($rids as $rid) {
    if ($rid) {
      $form_state['values']['field_role_id'][LANGUAGE_NONE][] = array('value' => $rid);
    }
  }

  $roles = user_roles();
  $roles_with_states = array('PARCC-Member Educator', 'Content Contributor');
  $roles_rids = array();
  foreach ($roles_with_states as $role) {
    $state_rid = array_search($role, $roles);
    $roles_rids[] = $state_rid;
  }

  if (!count(array_intersect($rids, $roles_rids))) {
    // Force no state on any role except PARCC-Member Educator or Content Contributor
    $form_state['values']['field_member_state'][LANGUAGE_NONE][0]['tid'] = NULL;
  }

  foreach ($form_state['invitees'] as $key => $invitee) {
    // invite to group
    $form_state['values']['field_invitation_email_address'][LANGUAGE_NONE][0]['value'] = $invitee;
    invite_form_submit($form, $form_state);
    $form_state['invite']->reg_code = invite_generate_code();
    unset($form_state['invite']->iid);
  }
}

/**
 *  Implements hook_invite_accept().
 */
function prc_invite_form_invite_accept($invite) {
  // The field values from the invite are added to the user registration form
  // in prc_registration_form_user_register_form_validate()

  $w = entity_metadata_wrapper('invite', $invite);
  $invitee = $invite->invitee;
  $account = user_load($invitee);
  $invite_rid = $w->field_role_id->value();
  $roles = user_roles(TRUE);
  if (count(array_intersect(array_values($invite_rid), array_keys($roles)))) {
    $educator_rid = array_search('Educator', $roles);
    // Users get Educator by default, so don't do anything funky if it's an Educator invite
    if (count($invite_rid) != 1 | !array_search($educator_rid, $invite_rid)) {
      $new_roles = array();
      // Remove all other roles from the user
      foreach ($roles as $rid => $rname) {
        $new_roles[$rid] = 0;
      }
      // Add authenticated user back in
      $new_roles[2] = $roles[2];
      foreach ($invite_rid as $user_rid) {
        if (array_key_exists($user_rid, $roles)) {
          $role_name = $roles[$user_rid];
          $new_roles[$user_rid] = $role_name;
        }
      }
      // Add role to user
      user_save($account, array('roles' => $new_roles));
    }
  }
}

/**
 *  Implements hook_token_info().
 */
function prc_invite_form_token_info() {
  $types = array();
  $tokens = array();

  $tokens['invite']['role-name'] = array(
    'name' => t('Role Name'),
    'description' => t('Displays role name from the field_role_id field (includes "a" or "an", eg, "an Educator" or "a Content Author".'),
  );

  return array(
    'types' => $types,
    'tokens' => $tokens,
  );
}

/**
 *  Implements hook_tokens().
 */
function prc_invite_form_tokens($type, $tokens, array $data = array(), array $options = array()) {
  $langcode = LANGUAGE_NONE;
  if (isset($options['language'])) {
    $url_options['language'] = $options['language'];
    $langcode = $options['language']->language;
  }

  $replacements = array();
  // URL tokens.
  if ($type == 'invite' && !empty($data['invite'])) {
    foreach ($tokens as $name => $original) {
      switch ($name) {
        case 'role-name':
          $invite = $data['invite'];
          $rids = array();
          foreach ($invite->field_role_id[$langcode] as $rid) {
            $rid = $rid['value'];
            $rids[] = $rid;
          }
          $roles = user_roles();
          $role_names = array();
          foreach ($rids as $rid) {
            $role_names[] = $roles[$rid];
          }
          $role_name = implode(', ', $role_names);
          $replacements[$original] = $role_name;
          break;
      }
    }
  }
  return $replacements;
}