<?php

/**
 * @file
 * Alters to registration forms.
 */

function prc_pd_course_form_form_course_outline_overview_form_alter(&$form, &$form_state) {

  // Change the order from alpha to the order specified in the story
  unset($form['more']['object_type']['#options']['course_content-quiz']);

  // Now rename the object types from their actual content type names to the ones specified in the story
  $form['more']['object_type']['#options']['course_content-pd_module'] = 'Module';
  $form['more']['object_type']['#options']['course_quiz-quiz'] = 'Exam';

  if (count($form['course_outline']['objects']) <= 2) {
    // Always has #tree and #element_validate, so any more than these two means real objects
    $form['no_objects'] = array(
      '#type' => 'markup',
      '#markup' => t('No objects are assigned to this course.'),
      '#weight' => -10,
    );
  } else {
    // Remove the summary text from each object
    foreach ($form['course_outline']['objects'] as $key => $value) {
      if (strpos($key, '#') === FALSE) {
        $form['course_outline']['objects'][$key]['summary']['#access'] = FALSE;
        $form['course_outline']['objects'][$key]['options'] = str_replace('>Settings<', '>Edit Settings<', $form['course_outline']['objects'][$key]['options']);
      }
    }
  }
}

/**
 * Implements hook_form_FORM_ID_alter
 *
 * Changes the title of the PD Course form
 *
 * @param $form
 * @param $form_state
 */

function prc_pd_course_form_form_pd_course_node_form_alter(&$form, &$form_state) {
  $title = drupal_get_title();
  $title = str_replace('PD Course', 'Course', $title);
  drupal_set_title($title, PASS_THROUGH);

  $perm_weight = $form['field_permissions']['#weight'];

  $form['field_length_quantity'][$form['field_length_quantity']['#language']]['#title'] = '';
  $form['field_length_quantity'][$form['field_length_quantity']['#language']]['#suffix'] = '&nbsp;-&nbsp;';
  $form['field_length_unit'][$form['field_length_unit']['#language']]['#title'] = '';

  $published = 1;
  if (isset($form_state['node']->nid)) {
    $published = $form_state['node']->status;
  }

  $form['faux_published'] = array(
    '#title' => 'Published',
    '#type' => 'checkbox',
    '#default_value' => $published,
    '#weight' => $perm_weight + 1,
  );

  global $user;
  if (!array_search('administrator', $user->roles)) {
    $form['course']['#access'] = FALSE;
  }

  $form['#validate'][] = 'prc_pd_course_form_form_pd_course_node_form_validate';

}

/**
 * Validate for user registration form
 *
 * @param $form
 * @param $form_state
 */
function prc_pd_course_form_form_pd_course_node_form_validate(&$form, &$form_state) {
  $faux_published = $form_state['values']['faux_published'];
  $form_state['values']['status'] = $faux_published;
}

/**
 *  Implements hook_form_FORM_ID_alter().
 */
function prc_pd_course_form_form_course_object_options_form_alter(&$form, &$form_state) {
  // We can't hide pd_module or the form token doesn't get set correctly

//  $form['pd_module']['#access'] = FALSE;
  $title_weight = $form['title']['#weight'];
  $form['pd_module']['#weight'] = $title_weight;
  $form['title']['#weight'] = $title_weight + 1;

  $form['outline']['#access'] = FALSE;
  $form['plugins']['access']['#access'] = FALSE;
  $form['node']['private']['#access'] = FALSE;

  //$selected_node_type = $form['node']['node_type']['#default_value'];

  $form['node']['use_existing_node']['#default_value'] = 1;
//  $form['node']['use_existing_node']['#access'] = FALSE;
//  unset($form['node']['instance']['#states']);

//  $form['node']['node_type']['#access'] = FALSE;
//  $form['node']['use_node_title']['#access'] = FALSE;

  //$form['node']['instance']['#autocomplete_path']

  unset($form['course_tabs']);
}
