<?php

/**
 * @file
 * Alters to registration forms.
 */

/**
 * Implements hook_form_FORM_ID_alter
 *
 * Changes the title of the registration form
 *
 * @param $form
 * @param $form_state
 */
function prc_registration_form_user_register_form_alter(&$form, &$form_state) {

  drupal_set_title('Create User Account to Join Partnership Resource Center');
  $invite = invite_load_from_session();

  $form['#validate'][] = 'prc_registration_form_user_register_form_validate';

  $form['field_user_state']['und']['#title'] = t('State where you teach');
  //Mark the states that are PARCC in the user states dropdown
  //Make it so the account number text box appears when they are selected
  $p_states = db_query('select name from taxonomy_term_data where vid = (
      select vid from taxonomy_vocabulary where machine_name = \'member_state\')')->fetchCol('vid');
  //$form_state['p_states'] = $p_states;
  $state_field = ':input[name="field_user_state[und]"]';

  //Needed for the invite
  $original_opts = $form['field_user_state']['und']['#options'];

  foreach ($form['field_user_state']['und']['#options'] as $tid => &$term) {
    if (in_array($term, $p_states)) {
      $term = $term . ' - PARCC Member';
      $form['state_account_number']['#states']['visible'][$state_field][] = array('value' => $tid);
    }
  }

  // We don't want to display any of this stuff if the user is coming from an invite
  if (!$invite) {

    $profession_weight = $form['field_user_state']['#weight'];
    //variable to hold the selector for the state field

    $form['state_account_number'] = array(
      '#type' => 'textfield',
      '#title' => t('State Account #'),
      '#weight' => $profession_weight + 2,
      '#states' => array(
        'visible' => array(
          $state_field => array(),
        ),
        'required' => array(
          $state_field => array(),
        ),
      ),
    );
  }else{

    $w = entity_metadata_wrapper('invite', $invite);
    $user_state = $w->field_user_state->value();
    if(!empty($user_state)){
      //Set the user state field
      $original_opts = array_flip($original_opts);
      $form['field_user_state']['und']['#default_value'] = $original_opts[$user_state->name];
      $form['field_user_state']['und']['#access'] = FALSE;

      $form['display_state'] = array(
        '#title' => t('State where you teach'),
        '#type' => 'textfield',
        '#default_value' => $user_state->name,
        '#disabled' => TRUE,
        '#weight' => $form['field_user_state']['#weight'],
      );
      if(in_array($user_state->name, $p_states)){
        // Set the member state
        $member_opts = array_flip($form['field_member_state']['und']['#options']);
        $form['field_member_state']['und']['#value'] = $member_opts[$user_state->name];
      }
    }
  }
}

/**
 * Validate for user registration form
 *
 * @param $form
 * @param $form_state
 */
function prc_registration_form_user_register_form_validate(&$form, &$form_state) {

  if (!empty($form_state['values']['state_account_number'])) {
    $account_number = $form_state['values']['state_account_number'];
    $query = new EntityFieldQuery();
    $query->entityCondition('entity_type', 'taxonomy_term')
      ->entityCondition('bundle', 'member_state')
      ->fieldCondition('field_state_code', 'value', $account_number, '=');
    $result = $query->execute();
    if (array_key_exists('taxonomy_term', $result)) {
      $tids = array_keys($result['taxonomy_term']);
      $tid = reset($tids);
      $form_state['values']['field_member_state'][LANGUAGE_NONE][0]['tid'] = $tid;
    }
    else {
      form_set_error('state_account_number', t('Valid State Account # is incorrect. Leave this blank if you do not have one.'));
    }
  }
}