<?php
/**
 * @file
 * PRC Technology Readiness Tool module code.
 */

module_load_include('inc', 'prc_trt', 'prc_trt_request_readiness_checks');
module_load_include('inc', 'prc_trt', 'prc_trt_delete_schools');

function prc_trt_form_eck__entity__form_edit_prc_trt_capacity_check_alter(&$form, &$form_state) {
  prc_trt_form_eck__entity__form_add_prc_trt_capacity_check_alter($form, $form_state);
}

function prc_trt_form_eck__entity__form_add_prc_trt_capacity_check_alter(&$form, &$form_state) {
  drupal_set_title(t('Testing Capacity Check'));
  $form['actions']['submit']['#value'] = t('Submit');

  $form['instructions_text'] = array(
    '#type' => 'item',
    '#markup' => t('Instructions go here. For example: To determine if your school has the appropriate number of test-ready devices to run a successful assessment, enter information requested below.'),
    '#weight' => -12,
  );

  if (array_key_exists('entityreference_prepopulate', $form_state)) {
    $form['field_name'][LANGUAGE_NONE][0]['value']['#required'] = TRUE;
    $school_nid = $form_state['entityreference_prepopulate']['prc_trt']['capacity_check']['field_ref_school'][0];
    $school = node_load($school_nid);
    $school_wrapper = entity_metadata_wrapper('node', $school);
    $students = $school_wrapper->field_number_of_students->value();
    if ($students) {
      $form['field_number_of_students']['und'][0]['value']['#default_value'] = $students;
    }
  }
  else {
    $form['important_school_message_text'] = array(
      '#type' => 'item',
      '#markup' => t('Important: If you are a school administrator, please run this check from your school readiness page. Contact your District Administrator to have the link to that page emailed to you.'),
      '#weight' => -11,
    );
  }

  $form['required_message'] = array(
    '#type' => 'item',
    '#markup' => t('* indicates required field'),
    '#weight' => -10,
  );

  // Wireless only visible when selected from network connection
  $form['field_wireless_connection_speed']['#states'] = array(
    'visible' => array(
      ':input[name="field_network_connection_type[und]"]' => array('value' => "wireless"),
    ),
  );

  // Wired only visible when selected from network connection
  $form['field_wired_connection_speed']['#states'] = array(
    'visible' => array(
      ':input[name="field_network_connection_type[und]"]' => array('value' => "wired"),
    ),
  );

  $form['field_network_connection_type']['und']['#options']['_none'] = t('Please select');
  $form['field_wired_connection_speed']['und']['#options']['_none'] = t('Please select');
  $form['field_wireless_connection_speed']['und']['#options']['_none'] = t('Please select');
  $form['field_ref_school']['#access'] = FALSE;

  $form['field_devices_capacity']['#access'] = FALSE;
  $form['field_devices_capacity_results']['#access'] = FALSE;
  $form['field_bandwidth_capacity']['#access'] = FALSE;
  $form['field_bandwidth_capacity_results']['#access'] = FALSE;
}

function prc_trt_form_eck__entity__form_edit_prc_trt_system_check_alter(&$form, &$form_state) {
  $form = _prc_trt_alter_system_check_form($form, $form_state);
}

function prc_trt_form_eck__entity__form_add_prc_trt_system_check_alter(&$form, &$form_state) {
  $form = _prc_trt_alter_system_check_form($form, $form_state);
}

/**
 * @param $form
 * @param $form_state
 * @return mixed
 */
function _prc_trt_alter_system_check_form(&$form, &$form_state) {
  $form['actions']['submit']['#value'] = t('Submit');

  if (array_key_exists('entityreference_prepopulate', $form_state)) {
    $form['field_name'][LANGUAGE_NONE][0]['value']['#required'] = TRUE;
  }
  else {
    $form['important_school_message_text'] = array(
      '#type' => 'item',
      '#markup' => t('Important: If you are a school administrator, please run this check from your school readiness page. Contact your District Administrator to have the link to that page emailed to you.'),
      '#weight' => -11,
    );
  }

  $form['required_message'] = array(
    '#type' => 'item',
    '#markup' => '* indicates required field',
    '#weight' => -10,
  );

  $hide_fields = array(
    'field_monitor_color_depth',
    'field_screen_resolution_width',
    'field_screen_resolution_height',
    'field_browser',
    'field_browser_version',
    'field_browser_cookies_enabled',
    'field_browser_javascript_enabled',
    'field_browser_images_enabled',
    'field_result',
    'field_ref_school',
    'field_jre_version',
  );

  foreach ($hide_fields as $hide_field) {
    $form[$hide_field]['#access'] = FALSE;
  }

  $form['faux_browser'] = array(
    '#type' => 'hidden',
  );
  $form['faux_javascript'] = array(
    '#type' => 'hidden',
  );
  $form['faux_cookies'] = array(
    '#type' => 'hidden',
  );
  $form['faux_images'] = array(
    '#type' => 'hidden',
  );
  $form['faux_monitor_color_depth'] = array(
    '#type' => 'hidden',
  );
  $form['faux_screen_resolution_width'] = array(
    '#type' => 'hidden',
  );
  $form['faux_screen_resolution_height'] = array(
    '#type' => 'hidden',
  );
  $form['faux_jre_version'] = array(
    '#type' => 'hidden',
  );

  drupal_add_js(drupal_get_path('module', 'prc_trt') . '/prc_trt.js');
  // This is how we can determine what version of Java the user has.
  drupal_add_js(drupal_get_path('module', 'prc_trt') . '/deployJava.js');

  $form['#validate'][] = 'prc_trt_form_eck__entity__form_add_prc_trt_system_check_validate';
  return $form;
}

function prc_trt_form_eck__entity__form_add_prc_trt_system_check_validate(&$form, &$form_state) {
  $my_browser = 'other';
  // Set field_browser's value to show what browser the user is in.
  if (array_key_exists('faux_browser', $form_state['input']) && $form_state['input']['faux_browser']) {
    $my_browser = $form_state['input']['faux_browser'];
    $b = explode(' ', $my_browser);
    $browser_type = $b[0];
    $browser_version = $b[1];
  }
  elseif (isset($_SERVER['HTTP_USER_AGENT'])) {
    $agent = strtolower($_SERVER['HTTP_USER_AGENT']);
    $browser = browserclass_check_browser($agent);
    if (is_array($browser) && count($browser)) {
      $my_browser = array_pop($browser);
      $browser_type = array_pop($browser);
      $browser_version = str_replace($browser_type, '', $my_browser);
    }
  }
  form_set_value($form['field_browser'], array(LANGUAGE_NONE => array(0 => array('value' => $browser_type))), $form_state);
  form_set_value($form['field_browser_version'], array(LANGUAGE_NONE => array(0 => array('value' => $browser_version))), $form_state);

  $javascript = $form_state['input']['faux_javascript'] === 'true' ? 1 : 0;
  form_set_value($form['field_browser_javascript_enabled'], array(LANGUAGE_NONE => array(0 => array('value' => $javascript))), $form_state);

  $cookies = $form_state['input']['faux_cookies'] === 'true' ? 1 : 0;
  form_set_value($form['field_browser_cookies_enabled'], array(LANGUAGE_NONE => array(0 => array('value' => $cookies))), $form_state);

  $images = $form_state['input']['faux_images'] === 'true' ? 1 : 0;
  form_set_value($form['field_browser_images_enabled'], array(LANGUAGE_NONE => array(0 => array('value' => $images))), $form_state);

  $monitor_color_depth = $form_state['input']['faux_monitor_color_depth'];
  form_set_value($form['field_monitor_color_depth'], array(LANGUAGE_NONE => array(0 => array('value' => $monitor_color_depth))), $form_state);

  $res_w = $form_state['input']['faux_screen_resolution_width'];
  form_set_value($form['field_screen_resolution_width'], array(LANGUAGE_NONE => array(0 => array('value' => $res_w))), $form_state);

  $res_h = $form_state['input']['faux_screen_resolution_height'];
  form_set_value($form['field_screen_resolution_height'], array(LANGUAGE_NONE => array(0 => array('value' => $res_h))), $form_state);

  $jre_version = $form_state['input']['faux_jre_version'];
  form_set_value($form['field_jre_version'], array(LANGUAGE_NONE => array(0 => array('value' => $jre_version))), $form_state);
}

function _prc_trt_system_check_extra_field_operating_system_pass($entity) {
  $systemChecker = new PrcTrtSystemCheck($entity);
  $field_result = $systemChecker->operatingSystemPass();
  return $field_result;
}

function _prc_trt_system_check_extra_field_monitor_size_pass($entity) {
  $systemChecker = new PrcTrtSystemCheck($entity);
  $field_result = $systemChecker->monitorSizePass();
  return $field_result;
}

function _prc_trt_system_check_extra_field_monitor_color_depth_pass($entity) {
  $systemChecker = new PrcTrtSystemCheck($entity);
  $field_result = $systemChecker->colorDepthPass();
  return $field_result;
}

function _prc_trt_system_check_extra_field_screen_resolution_pass($entity) {
  $systemChecker = new PrcTrtSystemCheck($entity);
  $field_result = $systemChecker->resolutionPass();
  return $field_result;
}

function _prc_trt_system_check_extra_field_processor_pass($entity) {
  $systemChecker = new PrcTrtSystemCheck($entity);
  $field_result = $systemChecker->processorPass();
  return $field_result;
}

function _prc_trt_system_check_extra_field_ram_pass($entity) {
  $systemChecker = new PrcTrtSystemCheck($entity);
  $field_result = $systemChecker->ramPass();
  return $field_result;
}

function _prc_trt_system_check_extra_field_browser_pass($entity) {
  $systemChecker = new PrcTrtSystemCheck($entity);
  $field_result = $systemChecker->browserResult();
  return $field_result;
}

function _prc_trt_system_check_extra_field_cookies_pass($entity) {
  $systemChecker = new PrcTrtSystemCheck($entity);
  $field_result = $systemChecker->cookiesPass();
  return $field_result;
}

function _prc_trt_system_check_extra_field_javascript_pass($entity) {
  $systemChecker = new PrcTrtSystemCheck($entity);
  $field_result = $systemChecker->jsPass();
  return $field_result;
}

function _prc_trt_system_check_extra_field_images_pass($entity) {
  $systemChecker = new PrcTrtSystemCheck($entity);
  $field_result = $systemChecker->imagesPass();
  return $field_result;
}

function _prc_trt_system_check_extra_field_jre_version_pass($entity) {
  $systemChecker = new PrcTrtSystemCheck($entity);
  $field_result = $systemChecker->jrePass();
  return $field_result;
}

function _prc_trt_capacity_check_extra_field_devices_required($entity) {
  $w = entity_metadata_wrapper('prc_trt', $entity);
  $students = $w->field_number_of_students->value();
  $sittings = $w->field_sittings_per_student->value();
  $days = $w->field_number_testing_days->value();
  $sessions = $w->field_number_of_sessions->value();
  $devices_required = ceil((($students * $sittings) / ($days * $sessions)) * 1.1);
  return $devices_required;
}
/**
 * Implements hook_field_extra_fields().
 */
function prc_trt_field_extra_fields() {
  $extra['prc_trt']['system_check']['display'] = array(
    'operating_system_pass' => array(
      'label' => t('Operating system: Results'),
      'description' => t('Did operating system pass?'),
      'weight' => 12,
      'callback' => '_prc_trt_system_check_extra_field_operating_system_pass',
    ),
    'monitor_size_pass' => array(
      'label' => t('Monitor size: Results'),
      'description' => t('Did monitor size pass?'),
      'weight' => 13,
      'callback' => '_prc_trt_system_check_extra_field_monitor_size_pass',
    ),
    'monitor_color_depth_pass' => array(
      'label' => t('Monitor color depth: Results'),
      'description' => t('Did monitor color depth pass?'),
      'weight' => 14,
      'callback' => '_prc_trt_system_check_extra_field_monitor_color_depth_pass',
    ),
    'screen_resolution_pass' => array(
      'label' => t('Screen resolution: Results'),
      'description' => t('Did screen resolution pass?'),
      'weight' => 15,
      'callback' => '_prc_trt_system_check_extra_field_screen_resolution_pass',
    ),
    'processor_pass' => array(
      'label' => t('Processor speed: Results'),
      'description' => t('Did processor pass?'),
      'weight' => 16,
      'callback' => '_prc_trt_system_check_extra_field_processor_pass',
    ),
    'ram_pass' => array(
      'label' => t('RAM: Results'),
      'description' => t('Did RAM pass?'),
      'weight' => 17,
      'callback' => '_prc_trt_system_check_extra_field_ram_pass',
    ),
    'browser_pass' => array(
      'label' => t('Browser: Results'),
      'description' => t('Did browser pass?'),
      'weight' => 18,
      'callback' => '_prc_trt_system_check_extra_field_browser_pass',
    ),
    'cookies_pass' => array(
      'label' => t('Cookies: Results'),
      'description' => t('Did cookies pass?'),
      'weight' => 19,
      'callback' => '_prc_trt_system_check_extra_field_cookies_pass',
    ),
    'javascript_pass' => array(
      'label' => t('Javascript: Results'),
      'description' => t('Did Javascript pass?'),
      'weight' => 20,
      'callback' => '_prc_trt_system_check_extra_field_javascript_pass',
    ),
    'images_pass' => array(
      'label' => t('Images: Results'),
      'description' => t('Did images pass?'),
      'weight' => 21,
      'callback' => '_prc_trt_system_check_extra_field_images_pass',
    ),
    'jre_version_pass' => array(
      'label' => t('Java: Results'),
      'description' => t('Did Java pass?'),
      'weight' => 21,
      'callback' => '_prc_trt_system_check_extra_field_jre_version_pass',
    ),
  );
  $extra['prc_trt']['capacity_check']['display'] = array(
    'devices_required' => array(
      'label' => t('Number of devices required'),
      'description' => t('How many devices are required?'),
      'weight' => 4,
      'callback' => '_prc_trt_capacity_check_extra_field_devices_required',
    ),
    'devices_capacity' => array(
      'label' => t('Devices capacity'),
      'description' => t('Devices capacity'),
      'weight' => 5,
    ),
    'bandwidth_capacity' => array(
      'label' => t('Bandwidth capacity'),
      'description' => t('Bandwidth capacity'),
      'weight' => 6,
    ),
  );
  return $extra;
}

function _prc_trt_field_overall_results($entity) {
  $systemChecker = new PrcTrtSystemCheck($entity);
  $all_pass = $systemChecker->overallPass();
  return $all_pass;
}

/**
 * Implements hook_entity_view().
 */
function prc_trt_entity_view($entity, $type, $view_mode, $langcode) {
  if ($type == 'prc_trt') {
    switch ($entity->type) {
      case 'system_check':
        _prc_trt_view_entity_system_check($entity);
        break;
      case 'capacity_check':
        _prc_trt_view_entity_capacity_check($entity);
        break;
    }
  }
}

/**
 * @param $entity
 */
function _prc_trt_view_entity_capacity_check($entity) {
  drupal_set_title(t('Testing Capacity Check Results'));

  $w = entity_metadata_wrapper('prc_trt', $entity);
  $students = $w->field_number_of_students->value();
  $sittings = $w->field_sittings_per_student->value();
  $devices = $w->field_number_of_devices->value();
  $days = $w->field_number_testing_days->value();
  $sessions = $w->field_number_of_sessions->value();

  $devices_required = ceil((($students * $sittings) / ($days * $sessions)) * 1.1);
  $entity->content['devices_required'] = array(
    '#type' => 'item',
    '#title' => t('# of devices required:'),
    '#markup' => '<div class="field-devices-required">- ' . $devices_required . '</div>',
    '#weight' => 0.1,
    '#prefix' => '<div class="field-devices-required">',
    '#suffix' => '</div>',
  );


  $devices_capacity = $devices - $devices_required;
  $entity->content['devices_capacity'] = array(
    '#type' => 'item',
    '#title' => t('devices capacity:'),
    '#markup' => '<div class="field-devices-capacity">' . $devices_capacity . '</div>',
    '#weight' => 0.2,
    '#prefix' => '<div class="field-devices-capacity">',
    '#suffix' => '</div>',
  );

  $speed = $w->field_speed_of_connection->value();
  $bandwidth_capacity = round($speed / $students, 3);
  $entity->content['bandwidth_capacity'] = array(
    '#type' => 'item',
    '#title' => t('bandwidth capacity:'),
    '#markup' => '<div class="field-bandwidth-capacity">' . t('@bandwidth_capacity Mbps/student', array('@bandwidth_capacity' => $bandwidth_capacity)) . '</div>',
    '#weight' => 0.3,
  );

  $entity->content['device_capacity_results'] = array(
    '#type' => 'container',
    '#weight' => 0.4,
  );

  $devices_required_passfail = $devices_capacity >= 0 ? t('Passed') : t('Failed');
  $entity->content['device_capacity_results']["devices_required_passfail"] = array(
    '#type' => 'item',
    '#title' => t('Devices Capacity Results'),
    '#markup' => $devices_required_passfail . ' — ' . $devices_capacity,
    '#weight' => 0.6,
  );
  if ($devices_capacity <= 0) {
    $entity->content['device_capacity_results']["devices_required_nextsteps"] = array(
      '#markup' => t('Instructions or next steps go here.'),
      '#weight' => 0.7,
    );
  }

  $entity->content['bandwidth_capacity_results'] = array(
    '#type' => 'container',
    '#weight' => 0.8,
  );

  $cap_good = floatval(variable_get('prc_trt_capacity_minimum_good', .1));
  $cap_ok = floatval(variable_get('prc_trt_capacity_minimum_ok', .05));
  if ($bandwidth_capacity >= $cap_good) {
    $bandwidth_result = t('Exceeds Requirements');
    $bandwidth_extra_text = '';
  }
  elseif ($bandwidth_capacity >= $cap_ok) {
    $bandwidth_result = t('Meets Minimum Requirements (for no Caching)');
    $bandwidth_extra_text = t('Provide explanation of what Meets Minimum Requirements (for no Caching) means and any next steps.');
  }
  else {
    $bandwidth_result = t('Requires Test Caching');
    $bandwidth_extra_text = t('Provide explanation of what Requires Test Caching means (will not be able to run successful assessment) and any next steps.');
  }

  $entity->content['bandwidth_capacity_results']["bandwidth_status"] = array(
    '#type' => 'item',
    '#title' => t('Bandwidth Capacity Results'),
    '#markup' => t('@result - @bandwidth_capacity Mbps/student', array(
      '@result' => $bandwidth_result,
      '@bandwidth_capacity' => $bandwidth_capacity
    )),
    '#weight' => 0.91,
  );
  $entity->content['bandwidth_capacity_results']["bandwidth_extra_text"] = array(
    '#markup' => $bandwidth_extra_text,
    '#weight' => 0.92,
  );
}

/**
 * @param $entity
 */
function _prc_trt_view_entity_system_check($entity) {
  drupal_set_title(t('System Check'));
  $systemChecker = new PrcTrtSystemCheck($entity);
  $os_pass = $systemChecker->operatingSystemPass();
  $size_pass = $systemChecker->monitorSizePass();
  $depth_pass = $systemChecker->colorDepthPass();
  $res_pass = $systemChecker->resolutionPass();
  $ram_result = $systemChecker->ramResult();
  $browser_result = $systemChecker->browserResult();

  $cookies_pass = $systemChecker->cookiesPass();
  $js_pass = $systemChecker->jsPass();
  $images_pass = $systemChecker->imagesPass();
  $jre_pass = $systemChecker->jrePass();

  $entity->content['operating_system_pass'] = array(
    '#type' => 'item',
    '#title' => t('Operating system Results:'),
    '#markup' => $os_pass ? 'Pass' : 'Fail',
  );
  $entity->content['monitor_size_pass'] = array(
    '#type' => 'item',
    '#title' => t('Monitor size Results:'),
    '#markup' => $size_pass ? 'Pass' : 'Fail',
  );
  $entity->content['monitor_color_depth_pass'] = array(
    '#type' => 'item',
    '#title' => t('Monitor color depth Results:'),
    '#markup' => $depth_pass ? 'Pass' : 'Fail',
  );
  $entity->content['screen_resolution_pass'] = array(
    '#type' => 'item',
    '#title' => t('Screen resolution Results:'),
    '#markup' => $res_pass ? 'Pass' : 'Fail',
  );
  $entity->content['processor_pass'] = array(
    '#type' => 'item',
    '#title' => t('Processor speed Results:'),
    '#markup' => t('N/A'),
  );
  $entity->content['ram_pass'] = array(
    '#type' => 'item',
    '#title' => t('RAM Results:'),
    '#markup' => $ram_result,
  );
  $entity->content['browser_pass'] = array(
    '#type' => 'item',
    '#title' => t('Browser Results:'),
    '#markup' => $browser_result,
  );
  $entity->content['cookies_pass'] = array(
    '#type' => 'item',
    '#title' => t('Cookies Results:'),
    '#markup' => $cookies_pass ? 'Pass' : 'Fail',
  );
  $entity->content['javascript_pass'] = array(
    '#type' => 'item',
    '#title' => t('Javascript Results:'),
    '#markup' => $js_pass ? 'Pass' : 'Fail',
  );
  $entity->content['images_pass'] = array(
    '#type' => 'item',
    '#title' => t('Images Results:'),
    '#markup' => $images_pass ? 'Pass' : 'Fail',
  );
  $entity->content['jre_version_pass'] = array(
    '#type' => 'item',
    '#title' => t('Java Results:'),
    '#markup' => $jre_pass ? 'Pass' : 'Fail',
  );
}

/**
 * Implements hook_entity_presave().
 */
function prc_trt_entity_presave($entity, $type) {
  if ($type == 'prc_trt' && $entity->type == 'system_check') {
    _prc_entity_system_check_presave($entity);
  }
  elseif ($type == 'prc_trt' && $entity->type == 'capacity_check') {
    _prc_entity_capacity_check_presave($entity);
  }
  elseif ($type == 'node' && $entity->type == 'school') {
    _prc_trt_presave_school($entity);
  }
}

/**
 * @param $entity
 */
function _prc_trt_presave_school($entity) {
  $w = entity_metadata_wrapper('node', $entity);
  $member_state = NULL;
  $user_state = NULL;
  $ref_district = $w->field_ref_district->value();
  if ($ref_district) {
    $w_dist = entity_metadata_wrapper('node', $ref_district);
    $trt_state = $w_dist->field_ref_trt_state->value();
    if ($trt_state) {
      $w_state = entity_metadata_wrapper('node', $trt_state);
      if (isset($w_state->field_member_state)) {
        $member_state = $w_state->field_member_state->value();
      }
      if (isset($w_state->field_user_state)) {
        $user_state = $w_state->field_user_state->value();
      }
    }
  }

  $contact_email = $w->field_contact_email->value();
  $orig_contact_email = NULL;
  if ($contact_email) {
    if (isset($entity->original)) {
      // This doesn't make any sense to me either.
      // The way the Drupal extension creates the entity doesn't
      // come through entity_presave the way we expect, so we
      // have to check for both structures.
      if (is_array($entity->original->field_contact_email)) {
        $w_orig = entity_metadata_wrapper('node', $entity->original);
        $orig_contact_email = $w_orig->field_contact_email->value();
      }
      else {
        $orig_contact_email = $entity->original->field_contact_email;
      }
    }

    if ($orig_contact_email && $contact_email != $orig_contact_email) {

      // First we have to see if this former school admin was admin of any
      // other schools.

      $query = new EntityFieldQuery();

      $query->entityCondition('entity_type', 'node')
        ->entityCondition('bundle', 'school')
        ->fieldCondition('field_contact_email', 'value', $orig_contact_email, '=')
        ->propertyCondition('nid', $entity->nid, '!=');;
      $result = $query->execute();

      $remove_school_admin = TRUE;

      if (isset($result['node'])) {
        $nids = array_keys($result['node']);
        if (count($nids)) {
          $remove_school_admin = FALSE;
        }
      }
      if ($remove_school_admin) {
        // Different user
        $orig_account = user_load_by_mail($orig_contact_email);
        if ($orig_account) {
          _prc_trt_user_remove_role('School Admin', $orig_account);
        }
      }
    }

    $account = user_load_by_mail($contact_email);
    if (!$account) {
      $uid = $entity->uid;
      $account = user_load($uid);
      $subj = t('@user has sent you an invite!', array('@user' => $account->name));

      $info = field_info_instance('invite', 'field_invitation_email_body', 'invite_by_email');
      $body_default = $info['default_value'][0]['value'];

      $new_invite_type = 'invite';
      $new_invite = entity_create($new_invite_type, array(
        'type' => 'invite_by_email',
        'uid' => $uid,
      ));
      $wrapper = entity_metadata_wrapper($new_invite_type, $new_invite);
      $wrapper->field_invitation_email_address->set($contact_email);
      $wrapper->field_invitation_email_subject->set($subj);
      $wrapper->field_invitation_email_body->set($body_default);

      $school_admin_role = user_role_load_by_name('School Admin');
      $school_admin_rid = $school_admin_role->rid;
      if ($member_state) {
        $educator_role = user_role_load_by_name('PARCC-Member Educator');
        $educator_rid = $educator_role->rid;
        $wrapper->field_member_state->set($member_state);
      }
      else {
        $educator_role = user_role_load_by_name('Educator');
        $educator_rid = $educator_role->rid;
      }
      if ($user_state) {
        $wrapper->field_user_state->set($user_state);
      }
      $rids = array($school_admin_rid, $educator_rid);

      $wrapper->field_role_id->set($rids);

      $wrapper->save();
    }
    else {

      if ($member_state) {
        $role_name = 'PARCC-Member Educator';
        _prc_trt_user_add_role($role_name, $account);
        _prc_trt_user_remove_role('Educator', $account);
      }

      // User exists, give the School Admin role
      $role_name = 'School Admin';
      _prc_trt_user_add_role($role_name, $account);
    }
  }
}

/**
 * @param $role_name
 * @param $account
 * @throws \Exception
 */
function _prc_trt_user_add_role($role_name, $account) {
  $has_role = array_search($role_name, $account->roles);
  if ($has_role == FALSE) {
    $roles = user_roles(TRUE);
    $rid = array_search($role_name, $roles);
    if ($rid != FALSE) {
      $new_role = $account->roles;
      $new_role[$rid] = $role_name;
      user_save($account, array('roles' => $new_role));
    }
  }
}

/**
 * @param $role_name
 * @param $account
 * @throws \Exception
 */
function _prc_trt_user_remove_role($role_name, $account) {
  $has_role = array_search($role_name, $account->roles);
  if ($has_role == TRUE) {
    $roles = user_roles(TRUE);
    $rid = array_search($role_name, $roles);
    if ($rid != FALSE) {
      $new_role = $account->roles;
      unset($new_role[$rid]);
      user_save($account, array('roles' => $new_role));
    }
  }
}


/**
 * @param $entity
 */
function _prc_entity_capacity_check_presave($entity) {
  $w = entity_metadata_wrapper('prc_trt', $entity);
  $school = $w->field_ref_school->value();
  if ($school) {
    $students = $w->field_number_of_students->value();
    $school_wrapper = entity_metadata_wrapper('node', $school);
    $school_wrapper->field_number_of_students->set($students);
    $school_wrapper->save();
  }

  // Save the calculated values
  $students = $w->field_number_of_students->value();
  $sittings = $w->field_sittings_per_student->value();
  $devices = $w->field_number_of_devices->value();
  $days = $w->field_number_testing_days->value();
  $sessions = $w->field_number_of_sessions->value();

  $devices_required = ceil((($students * $sittings) / ($days * $sessions)) * 1.1);
  $devices_capacity = $devices - $devices_required;
  $devices_capacity_results = $devices_capacity >= 0 ? t('Passed') : t('Failed');

  $speed = $w->field_speed_of_connection->value();
  $bandwidth_capacity = round($speed / $students, 3);

  $cap_good = floatval(variable_get('prc_trt_capacity_minimum_good', .1));
  $cap_ok = floatval(variable_get('prc_trt_capacity_minimum_ok', .05));
  if ($bandwidth_capacity >= $cap_good) {
    $bandwidth_capacity_results = t('Good');
  }
  elseif ($bandwidth_capacity >= $cap_ok) {
    $bandwidth_capacity_results = t('OK');
  }
  else {
    $bandwidth_capacity_results = t('Poor');
  }
  $entity->field_devices_capacity[LANGUAGE_NONE][0]['value'] = $devices_capacity;
  $entity->field_devices_capacity_results[LANGUAGE_NONE][0]['value'] = $devices_capacity_results;
  $entity->field_bandwidth_capacity[LANGUAGE_NONE][0]['value'] = $bandwidth_capacity;
  $entity->field_bandwidth_capacity_results[LANGUAGE_NONE][0]['value'] = $bandwidth_capacity_results;

}

/**
 * @param $entity
 */
function _prc_entity_system_check_presave($entity) {
  $systemChecker = new PrcTrtSystemCheck($entity);
  $all_pass = $systemChecker->overallPass();
  $entity->field_result[LANGUAGE_NONE][0]['value'] = $all_pass;
}

function prc_trt_form_district_node_form_alter(&$form, &$form_state) {
  if (isset($form_state['node']->nid)) {
    drupal_set_title(t('Edit District'));
  }
  else {
    drupal_set_title(t('Add District'));
  }
  $form['actions']['submit']['#value'] = t('Submit');

  $form['instructions_text'] = array(
    '#type' => 'markup',
    '#markup' => t('Instructions to District Admin to add district, which will allow results generated by School Admin to be reported to the district.'),
    '#weight' => -12,
  );

  $form['#validate'][] = 'prc_trt_form_district_node_form_validate';

}

function prc_trt_form_district_node_form_validate(&$form, &$form_state) {
  _prc_trt_form_district_name_unique_validate($form_state);
}

function prc_trt_form_school_node_form_alter(&$form, &$form_state) {
  if (isset($form_state['node']->nid)) {
    drupal_set_title(t('Edit School'));
  }
  else {
    drupal_set_title(t('Add School'));
  }
  $form['actions']['submit']['#value'] = t('Submit');

  $form['required_message'] = array(
    '#type' => 'markup',
    '#markup' => '* indicates required field',
    '#weight' => -10,
  );

  $form['instructions_text'] = array(
    '#type' => 'markup',
    '#markup' => t('Overview / instructional copy goes here, if any.'),
    '#weight' => -12,
  );

  $form['field_ref_district']['#access'] = FALSE;

  $form['#validate'][] = 'prc_trt_form_school_node_form_validate';
  $form['#submit'][] = 'prc_trt_form_school_node_form_submit';
}

function prc_trt_form_school_node_form_validate(&$form, &$form_state) {
  $field_name = 'field_contact_email';
  $email = $form_state['values'][$field_name]['und'][0]['value'];
  if ($email && !valid_email_address($email)) {
    form_set_error($field_name, t('%email is not a valid e-mail address.', array('%email' => $email)));
  }

  _prc_trt_form_school_name_unique_validate($form_state);
}

/**
 * @param $form_state
 */
function _prc_trt_form_school_name_unique_validate(&$form_state) {
  $parent_entity_field = 'field_ref_district';
  $district_target_id = $form_state['values'][$parent_entity_field]['und'][0]['target_id'];
  $name_exists = _prc_trt_node_unique_name_validate($form_state, $parent_entity_field, $district_target_id, 'school');
  if ($name_exists) {
    form_set_error('title', t('The school name is being used by another school in your district. Please enter a different school name.'));
  }

}

/**
 * @param $form_state
 */
function _prc_trt_form_district_name_unique_validate(&$form_state) {
  $parent_entity_field = 'field_ref_trt_state';
  $district_target_id = $form_state['values'][$parent_entity_field]['und'][0]['target_id'];
  $name_exists = _prc_trt_node_unique_name_validate($form_state, $parent_entity_field, $district_target_id, 'district');
  if ($name_exists) {
    form_set_error('title', t('The district name is being used by another district in your state. Please enter a different district name.'));
  }
}

/**
 * @param $form_state
 * @param $parent_entity_field
 * @param $district_target_id
 * @return bool
 */
function _prc_trt_node_unique_name_validate(&$form_state, $parent_entity_field, $district_target_id, $bundle) {
  $title = trim($form_state['values']['title']);
  $query = new EntityFieldQuery();

  $query->entityCondition('entity_type', 'node')
    ->entityCondition('bundle', $bundle)
    ->fieldCondition($parent_entity_field, 'target_id', $district_target_id)
    ->propertyCondition('title', $title, 'CONTAINS');
  // Validate that node's name is unique in this parent
  if (array_key_exists('nid', $form_state['node'])) {
    $nid = $form_state['node']->nid;
    $query->propertyCondition('nid', $nid, '!=');
  }
  $result = $query->execute();

  $name_exists = FALSE;

  if (isset($result['node'])) {
    $nids = array_keys($result['node']);
    if (count($nids)) {
      $nodes = entity_load('node', $nids);
      foreach ($nodes as $node) {
        $raw_title = $node->title;
        $trimmed = trim($raw_title);
        if ($title == $trimmed) {
          $name_exists = TRUE;
        }
      }
      return $name_exists;
    }
    return $name_exists;
  }
  return $name_exists;
}

function prc_trt_form_school_node_form_submit(&$form, &$form_state) {
  if (array_key_exists('field_ref_district', $form_state['values']) &&
    $form_state['values']['field_ref_district']['und'][0]['target_id']
  ) {
    $district_nid = $form_state['values']['field_ref_district']['und'][0]['target_id'];
    //$form_state['redirect'] = "node/$district_nid/manage-schools";
    $_GET['destination'] = "node/$district_nid/manage-schools";
  }
}

function prc_trt_form_node_delete_confirm_alter(&$form, &$form_state) {
  if ($form['#node']->type == 'school') {
    $form['actions']['submit']['#submit'][] = 'node_delete_confirm_submit';
    $form['actions']['submit']['#submit'][] = '_prc_trt_school_delete_redirect';
  }
}

function _prc_trt_school_delete_redirect($form, &$form_state) {
  if (array_key_exists('0', $form_state['build_info']['args'])) {
    $district_nid = $form_state['build_info']['args'][0]->field_ref_district['und'][0]['target_id'];
    //$form_state['redirect'] = "node/$district_nid/manage-schools";
    $_GET['destination'] = "node/$district_nid/manage-schools";
  }
}

/**
 * Implements hook_action_info().
 */
function prc_trt_action_info() {
  return array(
    'prc_trt_request_readiness_checks' => array(
      'type' => 'node',
      'label' => t('Request Readiness Checks'),
      'configurable' => TRUE,
      'vbo_configurable' => FALSE,
      'triggers' => array('any'),
    ),
    'prc_trt_delete_schools' => array(
      'type' => 'node',
      'label' => t('Delete Schools'),
      'configurable' => FALSE,
      'vbo_configurable' => FALSE,
      'triggers' => array('any'),
    ),
  );
}

/**
 * Implements hook_form_alter().
 */
function prc_trt_form_alter(&$form, &$form_state, $form_id) {
  if ($form_id == 'views_form_trt_district_schools_panel_pane_1') {
    $form['select']['action::prc_trt_delete_schools']['#validate'][] = 'prc_trt_views_bulk_operations_form_validate';
  }
}

/**
 * Implements hook_module_implements_alter().
 */
function prc_trt_module_implements_alter(&$implementations, $hook) {
  if ($hook == 'form_alter' && isset($implementations['prc_trt'])) {
    $group = $implementations['prc_trt'];
    unset($implementations['prc_trt']);
    $implementations['prc_trt'] = $group;
  }
}

function prc_trt_views_bulk_operations_form_validate(&$form, &$form_state) {
  $vbo = _views_bulk_operations_get_field($form_state['build_info']['args'][0]);
  $field_name = $vbo->options['id'];
  $nids = $form_state['values']['views_bulk_operations'];
  $has_checks = _prc_trt_schools_have_checks($nids);
  if ($has_checks) {
    form_set_error($field_name, t('Only schools that haven\'t run readiness checks can be deleted.'));
  }
}

/**
 * @param $nids
 * @return bool
 */
function _prc_trt_schools_have_checks($nids) {
  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', 'prc_trt')
    ->fieldCondition('field_ref_school', 'target_id', $nids, 'IN');
  $result = $query->execute();
  $has_checks = isset($result['prc_trt']);
  return $has_checks;
}

/**
 * Implements hook_node_access().
 */
function prc_trt_node_access($node, $op, $account) {
  if ($op == 'create' && $node == 'district') {
    $allowed = user_access('create district content', $account);
    if ($allowed) {
      $uid = $account->uid;
      $query = new EntityFieldQuery();

      $query->entityCondition('entity_type', 'node')
        ->entityCondition('bundle', 'district')
        ->propertyCondition('uid', $uid);
      $result = $query->execute();

      if (isset($result['node'])) {
        return NODE_ACCESS_DENY;
      }
    }
    return NODE_ACCESS_IGNORE;
  }
}

/**
 * Implements hook_preprocess_breadcrumb().
 */
function prc_trt_preprocess_breadcrumb(&$variables) {
  global $user;
  $full_admin = array_search('administrator', $user->roles);
  $state_admin = array_search('State Admin', $user->roles);
  $district_admin = array_search('District Admin', $user->roles);
  $school_admin = array_search('School Admin', $user->roles);

  $item = menu_get_item();

  switch ($item['path']) {
    case 'node/%':
      $node = $item['page_arguments'][0];
      switch ($node->type) {
        case 'school':
          $breadcrumbs = array();
          if ($full_admin || $district_admin || $state_admin) {
            $w_school = entity_metadata_wrapper('node', $node);
            $district = $w_school->field_ref_district->value();
            if ($district) {
              $breadcrumb = _prc_trt_breadcrumb_readiness_page($district);
              $breadcrumbs[] = $breadcrumb;
              if ($full_admin || $state_admin) {
                $w_district = entity_metadata_wrapper('node', $district);
                $state = $w_district->field_ref_trt_state->value();
                if ($state) {
                  array_unshift($breadcrumbs, _prc_trt_breadcrumb_readiness_page($state));
                }
              }
            }
          }
          $variables['breadcrumb'] = $breadcrumbs;
          break;

        case 'district':
          if ($full_admin || $state_admin) {
            $breadcrumbs = array();
            $w_district = entity_metadata_wrapper('node', $node);
            $state = $w_district->field_ref_trt_state->value();
            if ($state) {
              $breadcrumbs[] = _prc_trt_breadcrumb_readiness_page($state);
              $variables['breadcrumb'] = $breadcrumbs;
            }
          }
          break;
        case 'state':
          break;
      }
      break;
    case 'node/%/edit':
      $node = $item['page_arguments'][0];
      switch ($node->type) {
        case 'district':
          $breadcrumbs = array();
          $breadcrumbs[] = _prc_trt_breadcrumb_readiness_page($node);
          $variables['breadcrumb'] = $breadcrumbs;
          break;
        case 'school':
          $district_nid = array_key_exists(LANGUAGE_NONE, $node->field_ref_district) ? $node->field_ref_district[LANGUAGE_NONE][0]['target_id'] : NULL;
          if ($district_nid) {
            $district = node_load($district_nid);
            $breadcrumbs = array();
            $breadcrumbs[] = _prc_trt_breadcrumb_readiness_page($district);
            if ($full_admin || $district_admin) {
              $breadcrumbs[] = l(t('Manage Schools'), "node/$district_nid/manage-schools");
            }
            $variables['breadcrumb'] = $breadcrumbs;
          }
          break;
      }
      break;
    case 'node/%/manage-schools':
      $node = $item['page_arguments'][1]->data;
      switch ($node->type) {
        case 'district':
          $breadcrumbs = array();
          $breadcrumbs[] = _prc_trt_breadcrumb_readiness_page($node);
          $variables['breadcrumb'] = $breadcrumbs;
          if (array_key_exists('op', $_POST) && $_POST['op'] == 'Request Readiness Checks') {
            $nid = $node->nid;
            $breadcrumbs[] = l(t('Manage Schools'), "node/$nid/manage-schools");
          }
          $variables['breadcrumb'] = $breadcrumbs;
          break;
      }
      break;
    case 'district/%/upload-schools':
      $node = $item['page_arguments'][0];
      $nid = $node->nid;
      $breadcrumbs = array();
      $breadcrumbs[] = _prc_trt_breadcrumb_readiness_page($node);
      $breadcrumbs[] = l(t('Manage Schools'), "node/$nid/manage-schools");
      $variables['breadcrumb'] = $breadcrumbs;
      break;
    case 'node/add/school':
      if (array_key_exists('field_ref_district', $_GET)) {
        $district_nid = $_GET['field_ref_district'];
        $district = node_load($district_nid);
        $breadcrumbs = array();
        $breadcrumbs[] = _prc_trt_breadcrumb_readiness_page($district);
        if ($full_admin || $district_admin) {
          $breadcrumbs[] = l(t('Manage Schools'), "node/$district_nid/manage-schools");
        }
        $variables['breadcrumb'] = $breadcrumbs;
      }
      break;
    case 'prc_trt/system_check/%':
    case 'prc_trt/capacity_check/%':
      $syscheck = $item['page_arguments'][2];
      $w_syscheck = entity_metadata_wrapper('prc_trt', $syscheck);
      $node = $w_syscheck->field_ref_school->value();
      if ($node) {
        // Structured...
        if ($full_admin || $school_admin || $district_admin || $state_admin) {
          $breadcrumbs = array();
          $breadcrumbs[] = _prc_trt_breadcrumb_readiness_page($node);
          if ($full_admin || $district_admin || $state_admin) {
            $w_school = entity_metadata_wrapper('node', $node);
            $district = $w_school->field_ref_district->value();
            if ($district) {
              array_unshift($breadcrumbs, _prc_trt_breadcrumb_readiness_page($district));
              if ($full_admin || $state_admin) {
                $w_district = entity_metadata_wrapper('node', $district);
                $state = $w_district->field_ref_trt_state->value();
                if ($state) {
                  array_unshift($breadcrumbs, _prc_trt_breadcrumb_readiness_page($state));
                }
              }
            }
          }
        }
        $variables['breadcrumb'] = $breadcrumbs;
      }
      else {
        // Unstructured.
        if (strpos($item['path'], 'system')) {
          $breadcrumbs[] = t('System Check');
          $breadcrumbs[] = l(t('Testing Capacity Checks'), 'admin/structure/entity-type/prc_trt/capacity_check/add');
        }
        else {
          $breadcrumbs[] = l(t('System Check'), 'admin/structure/entity-type/prc_trt/system_check/add');
          $breadcrumbs[] = t('Testing Capacity Checks');
        }
        $variables['breadcrumb'] = $breadcrumbs;
      }
      break;
    case 'admin/structure/entity-type/prc_trt/system_check/add':
    case 'admin/structure/entity-type/prc_trt/capacity_check/add':
      if (array_key_exists('field_ref_school', $_GET)) {
        // Structured...
        $school_nid = $_GET['field_ref_school'];
        $school = node_load($school_nid);
        $breadcrumbs = array();
        $breadcrumbs[] = _prc_trt_breadcrumb_readiness_page($school);
        if ($full_admin || $district_admin) {
          $breadcrumbs[] = l(t('Manage Schools'), "node/$school_nid/manage-schools");
        }
        $variables['breadcrumb'] = $breadcrumbs;
      }
      else {
        // Unstructured...
        if (strpos($item['path'], 'system')) {
          $breadcrumbs[] = t('System Check');
          $breadcrumbs[] = l(t('Testing Capacity Checks'), 'admin/structure/entity-type/prc_trt/capacity_check/add');
        }
        else {
          $breadcrumbs[] = l(t('System Check'), 'admin/structure/entity-type/prc_trt/system_check/add');
          $breadcrumbs[] = t('Testing Capacity Checks');
        }
      }
      $variables['breadcrumb'] = $breadcrumbs;
      break;
    default:
      array_shift($variables['breadcrumb']);
  }
}

/**
 * @param $district
 * @return string
 */
function _prc_trt_breadcrumb_readiness_page($node) {
  $uri = entity_uri('node', $node)['path'];
  $name = $node->title;
  $breadcrumb = l(t('@node Readiness', array('@node' => $name)), $uri);
  return $breadcrumb;
}

/**
 * Implements hook_views_pre_render().
 */
function prc_trt_views_pre_render(&$view) {
  if ($view->name == 'trt_district_readiness_schools') {
    $rows = array();
    // First we catalog rows
    foreach ($view->result as $row) {
      $school_name = $row->node_title;
      $check_type = $row->_field_data['field_ref_school_node_id']['entity']->type;
      if (!array_key_exists($school_name, $rows) || $check_type == 'capacity_check') {
        $rows[$school_name] = $check_type;
      }
    }
    // Now we start hiding rows for schools with both types of checks
    foreach ($view->result as $index => $row) {
      $school_name = $row->node_title;
      $check_type = $row->_field_data['field_ref_school_node_id']['entity']->type;
      if ($rows[$school_name] != $check_type) {
        // System check where school has multiple rows. Kill it.
        unset($view->result[$index]);
      }
    }
  } elseif ($view->name == 'trt_capacity_check_export') {
    $rows = array();
    // First we catalog rows
    foreach ($view->result as $row) {
      $school_nid = $row->node_field_data_field_ref_school_nid;
      $check_id = $row->id;
      if (!array_key_exists($school_nid, $rows) || $rows[$school_nid] < $check_id) {
        $rows[$school_nid] = $check_id;
      }
    }
    // Now we start hiding rows for schools with both types of checks
    foreach ($view->result as $index => $row) {
      $school_nid = $row->node_field_data_field_ref_school_nid;
      $check_id = $row->id;
      if ($rows[$school_nid] != $check_id) {
        // System check where school has multiple rows. Kill it.
        unset($view->result[$index]);
      }
    }
  }
}