<?php

/**
 * @file
 * Alters to registration forms.
 */

/**
 *  Implements hook_menu().
 */
function prc_lti_register_menu() {
  $items = array();
  // Display the 'Register a course for use as an LTI Provider'
  $items['admin-course/lti/%'] = array(
    'title' => 'Export Course to Another System',
    'description' => 'Export Course to Another System',
    'page callback' => 'prc_lti_register_consumer_add',
    'page arguments' => array(2),
    'access arguments' => array('administer lti_tool_provider module'),
    'type' => MENU_CALLBACK,
  );

  $items['admin-course/lti/confirmation'] = array(
    'title' => 'Export Course LTI Information',
    'description' => 'Export Course LTI Information',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('prc_lti_registration_download_form'),
    'access arguments' => array('administer lti_tool_provider module'),
    'type' => MENU_CALLBACK,
  );
  return $items;
}

/**
 * Add a consumer.
 *
 * @return array
 *   A LTI register consumer add form.
 */
function prc_lti_register_consumer_add($nid) {
  // Create a basic l$lti_registration structure to be used and passed to the
  // validation and submission functions.
  $consumer = entity_get_controller('lti_tool_provider_consumer')->create();
  return drupal_get_form('prc_lti_register_form', $consumer, $nid);
}

function prc_lti_register_form($form, &$form_state, $consumer, $nid) {

  $form = array();
  $node = node_load($nid);

  global $user;

  // Get the course objects associated to this course.
  $objects = $node->course['objects'];
  $object_list = array();
  $object_titles ='';

  foreach ($objects as $objectdata){

    // create a concise list of objects and required info for LTI processing
    $object_list[$objectdata->title] = drupal_get_path_alias('node/' . $objectdata->instance);

    // Create an unformatted list of the titles.
    $object_titles = $object_titles . '<li>' . $objectdata->title . '</li>';
  }

 $form['title'] = array(
    '#title' => 'Course Title',
    '#markup' => '<p><b>Course Title: </b>'   . $node->title . '</p>',
  );

  $form['instructions'] = array(
    '#title' => 'Instructions',

    '#markup' => '<p>To provide access to this course and its modules from a third party system, you will need to register it onto that system by using LTI (Learning Tools Interoperability) information provided below.</p>
                  <p>Enter a description in the field below to distinguish this registration from others using this same course.</p>
                  <p>Note that the access information is generated for course elements individually. The following course elements are available:<ul>'
                  . $object_titles
                  . '</ul>',
  );

  if (!isset($form_state['#consumer'])) {
    $form_state['#consumer'] = $consumer;
  }

  $form['lti_tool_provider_consumer_consumer'] = array(
    '#type' => 'textfield',
    '#title' => t('Registration Description'),
    '#required' => TRUE,
    '#maxlength' => 255,
    '#default_value' => $consumer->lti_tool_provider_consumer_consumer,
  );

  // Generate a unique id associated to the uid of the person making the LTI registration.
  $consumer_key = uniqid($user->uid . '_');

  $form['lti_tool_provider_consumer_key'] = array(
      '#type' => 'value',
      '#value' => $consumer_key
    );

  $form['lti_tool_provider_consumer_secret'] = array(
    '#type' => 'value',
    '#value' => rtrim(base64_encode(md5(microtime())),"="),
  );
  $form['lti_tool_provider_consumer_domain'] = array(
    '#type' => 'value',
    '#value' => $consumer_key
  );
  $form['lti_tool_provider_consumer_dummy_pref'] = array(
    '#type' => 'value',
    '#value' => TRUE,
  );
  $form['lti_tool_provider_consumer_id'] = array(
    '#type' => 'value',
    '#value' => $consumer->lti_tool_provider_consumer_id,
  );

  $form['course_info'] = array(
    '#type' => 'value',
    '#value' => $node,
  );

  $form['object_list'] = array(
    '#type' => 'value',
    '#value' => $object_list,
  );

  $form['lti_tool_provider_consumer'] = array(
    '#type' => 'value',
    '#value' => $consumer,
  );

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => 'Generate LTI Info ',
  );

  field_attach_form('lti_tool_provider_consumer', $consumer, $form, $form_state);

  return $form;

}

function prc_lti_register_form_prc_lti_register_form_alter (&$form, &$form_state, $form_id) {

  unset($form['destination']);
  $form['actions']['submit']['#submit'][] = 'prc_lti_register_form_submit';
}

/**
 * Validate the consumer l$lti_registration form.
 *
 * @param array $form
 *   The form.
 * @param array $form_state
 *   The form state.
 */
function prc_lti_register_form_validate(&$form, &$form_state) {
    $submitted = (object) $form_state['values']['lti_tool_provider_consumer'];
    field_attach_form_validate('lti_tool_provider_consumer', $submitted, $form, $form_state);
}

function prc_lti_register_form_submit(&$form, &$form_state) {
  $lti = array();
  $lti['registration'] = $form_state['values']['lti_tool_provider_consumer'];
  $lti['registration']->lti_tool_provider_consumer_key = $form_state['values']['lti_tool_provider_consumer_key'];
  $lti['registration']->lti_tool_provider_consumer_secret = $form_state['values']['lti_tool_provider_consumer_secret'];
  $lti['registration']->lti_tool_provider_consumer_consumer = $form_state['values']['lti_tool_provider_consumer_consumer'];
  $lti['registration']->lti_tool_provider_consumer_domain = $form_state['values']['lti_tool_provider_consumer_domain'];
  $lti['registration']->lti_tool_provider_consumer_dummy_pref = $form_state['values']['lti_tool_provider_consumer_dummy_pref'];
  $lti['object_list'] = $form_state['values']['object_list'];

  field_attach_submit('lti_tool_provider_consumer', $lti['registration'], $form, $form_state);
  $lti['registration'] = lti_tool_provider_consumer_save($lti['registration']); // Create a formatted object list for the course in text format.
  $formatted_object_list = PHP_EOL;

  foreach ($lti['object_list'] as $object_key => $object) {

    $formatted_object_list = $formatted_object_list . 'Custom Field for ' . $object_key . ' Module: custom_destination=' . $object .  PHP_EOL;
  }

  // Create a file for download
  $lti['lti_confirmation_file'] = 'Below is the information you will need to input into your LMS in order to enable your users to directly access the course and its modules from your LMS.' . PHP_EOL . PHP_EOL .

    'The method for inputting this information varies by LMS. In general you will need to create a separate External Application entry for each of the course\'s modules. For each module, use the same Key, Secret and LTI URL but use the appropriate Custom Field.' . PHP_EOL . PHP_EOL .

    'Registration Description: ' .$lti['registration']->lti_tool_provider_consumer_consumer . PHP_EOL
    . 'Key: ' .$lti['registration']->lti_tool_provider_consumer_key . PHP_EOL
    . 'Secret: ' .$lti['registration']->lti_tool_provider_consumer_secret . PHP_EOL
    . 'LTI URL: ' . $GLOBALS['base_url'] . '/lti' . PHP_EOL
    . 'Custom Fields: (Each line below represents an individual module that should be linked from the remote system using the information above and the line\'s "custom_destination" setting below.' . $formatted_object_list;

  // Save the LTI Registration Info to session variable for display on confirmation page and file download.
  $_SESSION['prc_lti_registration_info'] =$lti;
  drupal_goto('admin-course/lti/confirmation');
}

/**
 *
 * param string $url
 *    Full url to file to download
 * param string $uri
 *    Drupal uri of where to save file public://archive/test.pdf
 * param int $save_mode
 *    File save mode from drupal core, ex FILE_EXISTS_REPLACE
 */
function prc_lti_registration_download_form($form, &$form_state) {

  if (!empty($_SESSION['prc_lti_registration_info'])) {
    $lti = $_SESSION['prc_lti_registration_info'];
    unset($_SESSION['prc_lti_registration_info']);

    // Create a formatted object list for the course in HTML formmat.
    $formatted_object_list = '<ul>';

    foreach ($lti['object_list'] as $object_key => $object) {

      $formatted_object_list = $formatted_object_list . '<li>Custom Field for ' . $object_key . ' Module: custom_destination=' . $object . '</li>';
    }

    $formatted_object_list = $formatted_object_list . '</ul>';

    // Display LTI registration information to the screen.
    $lti_registration_info = '<p>Below is the information you will need to input into your LMS in order to enable your users to directly access the course and its modules from your LMS.
<p>The method for inputting this information varies by LMS. In general you will need to create a separate External Application entry for each of the course\'s modules. For each module, use the same Key, Secret and LTI URL but use the appropriate Custom Field.</p>

<p>Registration Description: ' . $lti['registration']->lti_tool_provider_consumer_consumer
      . '</p> Key: ' .$lti['registration']->lti_tool_provider_consumer_key
      . '</p> Secret: ' .$lti['registration']->lti_tool_provider_consumer_secret
      . '</p> LTI URL: ' . $GLOBALS['base_url'] . '/lti'
      . '</p>' . $formatted_object_list;

    $form['confirmation'] = array(
      '#title' => 'Confirmation Info',
      '#markup' => $lti_registration_info
    );

    $form['lti_info'] = array(
      '#type' => 'value',
      '#value' => $lti,
    );

    /* Access point for development of Download registration information button
    $form['submit'] = array(
      '#type' => 'submit',
      '#value' => 'Download LTI Registration Info',
    ); */

    return $form;
  }
}

function prc_lti_register_form_prc_lti_registration_download_form_alter ($form, &$form_state, $form_id) {

  unset($form['destination']);
  $form['actions']['submit']['#submit'][] = 'prc_lti_registration_download_form_submit';
}

function prc_lti_registration_download_form_submit($form, &$form_state) {
  $lti = $form_state['values']['lti_info'];
  // Prepare the confirmation LTI registration file.
  $file_name =$lti['registration']->lti_tool_provider_consumer_key . '.txt';
  $headers = array(
    'Content-Type' => 'text/csv',
    'Content-Disposition' => 'attachment; filename="' . $file_name . '"',
  );

  // A string containing the destination URI.
  $destination = 'temporary://' .$lti['registration']->lti_tool_provider_consumer_key . '.txt';
  // what to do when the destination file already exists
  $replace = FILE_EXISTS_REPLACE;

  $lti_registration_file = file_unmanaged_save_data($lti['lti_confirmation_file'], $destination, $replace);

  drupal_set_message(t('LTI Registration Complete.'));

  //_nondrupalexit_file_transfer($lti_registration_file, $headers);
  $form_state['redirect'] = 'admin-course';
}

function _nondrupalexit_file_transfer($uri, $headers) {
  if (ob_get_level()) {
    ob_end_clean();
  }
  foreach ($headers as $name => $value) {
    drupal_add_http_header($name, $value);
  }
  drupal_send_headers();
  $scheme = file_uri_scheme($uri);
  // Transfer file in 1024 byte chunks to save memory usage.
  if ($scheme && file_stream_wrapper_valid_scheme($scheme) && $fd = fopen($uri, 'rb')) {
    while (!feof($fd)) {
      print fread($fd, 1024);
    }
    fclose($fd);
    drupal_set_message(t('LTI Registration downloaded.'));
  }
}

